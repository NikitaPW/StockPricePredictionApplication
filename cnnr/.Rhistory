tmin<-tmp[1:a]
tmax<-tmp[length(v)-a:length(v)]
return(cat(tmin,tmax))
}
}
MinMax(1:4,3)
MinMax<-function(v,a){
if(a>length(v)){
return(cat("argument too long"))
}
else{
tmp<-sort(v)
tmin<-tmp[1:a]
tmax<-tmp[(length(v)-a):length(v)]
return(cat(tmin,"\n",tmax))
}
}
MinMax(1:4,3)
MinMax<-function(v,a){
if(a>length(v)){
return(cat("argument too long"))
}
else{
tmp<-sort(v)
tmin<-tmp[1:a]
tmax<-tmp[(length(v)-a):length(v)]
return(cat(tmin,"\n",tmax))
}
}
MinMax(1:4,2)
MinMax<-function(v,a){
if(a>length(v)){
return(cat("argument too long"))
}
else{
tmp<-sort(v)
tmin<-tmp[1:a]
tmax<-tmp[(length(v)-a-1):length(v)]
return(cat(tmin,"\n",tmax))
}
}
MinMax(1:4,2)
MinMax<-function(v,a){
if(a>length(v)){
return(cat("argument too long"))
}
else{
tmp<-sort(v)
tmin<-tmp[1:a]
tmax<-tmp[(length(v)-a+1):length(v)]
return(cat(tmin,"\n",tmax))
}
}
MinMax(1:4,2)
)
dim(A)
dim(A)[1]
submat<-function(M,k){
if(K>dim(M))
return(cat("k is too big"))
}
submat(A,5)
submat<-function(M,k){
if(k>dim(M))
return(cat("k is too big"))
}
submat(A,5)
submat<-function(M,k){
if(dim(matrix(0,k,k))>dim(M))
return(cat("k is too big"))
}
submat(A,5)
submat<-function(M,k){
if(k>dim(M)[1]||k>dim(M)[2])
return(cat("k is too big"))
}
submat(A,5)
submat<-function(M,k){
if(k>dim(M)[1]||k>dim(M)[2])
return(cat("k is too big"))
else if (k<=0){
return(cat("K is too small"))
}
}
submat(A,5)
submat(A,0)
submat(A,2)
submat<-function(M,k){
if(k>dim(M)[1]||k>dim(M)[2])
return(cat("k is too big"))
else if (k<=0){
return(cat("K is too small"))
}
else{
return(M[k:k,k:k])
}
}
submat(A,2)
submat<-function(M,k){
if(k>dim(M)[1]||k>dim(M)[2])
return(cat("k is too big"))
else if (k<=0){
return(cat("K is too small"))
}
else{
return(M[k,k])
}
}
submat(A,2)
submat<-function(M,k){
if(k>dim(M)[1]||k>dim(M)[2])
return(cat("k is too big"))
else if (k<=0){
return(cat("K is too small"))
}
else{
return(M[1:k,1:k])
}
}
submat(A,2)
diag(A)
?diag
#Ex1.5
I<-diag(x=1,5,5)
I
5/2
integer(5/2)
integer((5/2))
?integer
as.integer(5/2)
submat<-function(M=diag(x=1,m,m),k=as.integer(m/2),m){
if(k>dim(M)[1]||k>dim(M)[2])
return(cat("k is too big"))
else if (k<=0){
return(cat("K is too small"))
}
else{
return(M[1:k,1:k])
}
}
submat(3)
submat(,,3)
submat(,,4)
submat(,,5)
submat(,,6)
submat(,,7)
submat(,,8)
#Ex1.6
plot(x,x^3-x^2+x-1,col="red",lwd=2,ylim=c(-2,3),main = expression(f(x)==x^3-x^2+x-1)
sadw
#Ex1.6
plot(x,x^3-x^2+x-1,col="red",lwd=2,ylim=c(-2,3),main = expression(f(x)==x^3-x^2+x-1))
plot(x,x^2+1,type="l",lwd=2,col="red",main="My function",ylim=c(-2,2),ylab="f(x)",)
plot(x,x^2+1,type="l",lwd=2,col="red",main="My function",ylim=c(-2,2),ylab="f(x)",)
#Ex1.6
plot(x,x^3-x^2+x-1,col="red",lwd=2,ylim=c(-2,3))
#Ex1.6
x<-0
plot(x,x^3-x^2+x-1,col="red",lwd=2,ylim=c(-2,3),main = expression(f(x)==x^3-x^2+x-1))
#Ex1.6
x<-c(-2,3)
plot(x,x^3-x^2+x-1,col="red",lwd=2,ylim=c(-2,3),main = expression(f(x)==x^3-x^2+x-1))
plot(x,x^3-x^2+x-1,col="red",lwd=2,ylim=c(-2,3),main = expression(f(x)==x^3-x^2+x-1))
#Ex1.6
x<-seq(-2,0.1,3)
plot(x,x^3-x^2+x-1,col="red",lwd=2,main = expression(f(x)==x^3-x^2+x-1))
plot(x,x^3-x^2+x-1,col="red",lwd=2,main = expression(f(x)==x^3-x^2+x-1))
?plot
plot(x,x^3-x^2+x-1,col="red",lwd=2,main = expression(f(x)==x^3-x^2+x-1),ylab = "y")
#Ex1.6
x<-seq(-2,0.1,3)
x
#Ex1.6
x<-seq(-2,3,0.1)
plot(x,x^3-x^2+x-1,col="red",lwd=2,main = expression(f(x)==x^3-x^2+x-1),ylab = "y")
#Ex1.6
x<-seq(-2,3)
?plot
plot(x,x^3-x^2+x-1,col="red",lwd=2,main = expression(f(x)==x^3-x^2+x-1),ylab = "y")
#Ex1.6
x<-seq(-2,3,0.01)
plot(x,x^3-x^2+x-1,col="red",lwd=2,main = expression(f(x)==x^3-x^2+x-1),ylab = "y")
plot(x,x^3-x^2+x-1,col="red",lwd=1,main = expression(f(x)==x^3-x^2+x-1),ylab = "y")
plot(x,x^3-x^2+x-1,col="red",lwd=2,main = expression(f(x)==x^3-x^2+x-1),ylab = "y")
#Ex1.6
x<-seq(-2,3,0.001)
plot(x,x^3-x^2+x-1,col="red",lwd=2,main = expression(f(x)==x^3-x^2+x-1),ylab = "y")
?curve
curve(x^3-x^2+x-1,-2,3,ylab="y")
curve(x^3-x^2+x-1,-2,3,lwd=3,ylab="y")
curve(x^3-x^2+x-1,-2,3,lwd=3.col="green",ylab="y")
curve(x^3-x^2+x-1,-2,3,lwd=3,col="green",ylab="y")
curve(x^3-x^2+x-1,-2,3,lwd=3,col="green",ylab="y",main = expression(f(x)==x^3-x^2+x-1))
cars
data(mtcars)
data(cars)
head(cars)
data(cars)
head(cars)
head(mtcars)
data(cars)
data(mtcars)
force(mtcars)
data(cars)
force(cars)
n = 400 #all
x = 115 #suc
#CI 0.95
alpha<-0.05
phead<- x/n #p head estimator
p <- 0.25
z <- (phead-p)/sqrt((p*(1-p))/n)
qnorm(1-alpha/2)
?package
install.packages("boot")
lib("boot")
library("boot")
data<-(channing$entry)/12
#a) check normality
hist(data)
qqnorm(data)
qt(1-0.025,99)
qt(1-0.05,99)
ta<-qt(0.05,n-1)
qt(1-0.05,99)
qt(0.05,99)
qt(1-0.05,99)
qnorm(1-0.05)
qt(1-0.05,399)
qt(1-0.05,399)
qt(1-0.025,399)
qnorm(1-0.05)
qnorm(-0.4)
qnorm(0.4)
pnorm(0.4)
pnorm(-0.4)
qnorm(1-0.5)
qnorm(1-0.05)
pnorm(-2.5)
pnorm(2.5)
?t.test
x<-c(18.7,18.25,18,18.3,18.1,18.2,18.5)
sd(x)
mean(x)
(sd(x))^2
qchisq(1-0.05,6)
qchisq(0.05,6)
qchisq(1-0.05,6
)
library("rjson")
dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
# get values form json files
uniform_name <- paste(dir,"/test_outputs/uniform.json", sep = "")
geometric_name <- paste(dir,"/test_outputs/geometric.json", sep = "")
poisson_name <- paste(dir,"/test_outputs/poisson.json", sep = "")
hueristic_time_name <- paste(dir,"/test_outputs/heuristic-time.json", sep = "")
uniform <- fromJSON(file = uniform_name)
geometric <- fromJSON(file = geometric_name)
poisson <- fromJSON(file = poisson_name)
hueristic_time <- fromJSON(file = hueristic_time_name)
# form data frames
uniform_frame <- as.data.frame(uniform)
geometric_frame <- as.data.frame(geometric)
poisson_frame <- as.data.frame(poisson)
size <- length(uniform_frame$exact.time)
heuristic_size <- length(hueristic_time)
# take max of min, needed for nicer looking plots,
# heuristic solution will always produce values more or equal to exact values
uniform_max_of_min = max(uniform_frame$heuristic.values)
geometric_max_of_min = max(geometric_frame$heuristic.values)
poisson_max_of_min = max(geometric_frame$heuristic.values)
# x vector is started from 4 as it is minimum possible set size
x <- 4:(size + 3)
xh <- 4:(heuristic_size + 3)
# uniform execution comparison
dev.new()
plot(x, uniform_frame$exact.time, type = "o", lwd = 2, col = "blue",main = "Computation time comparison (uniform)",
xlab = "Number of elements", ylab = "computation time(ms)")
lines(x, uniform_frame$heuristic.time, type = "o", lwd = 2, col = 'red')
legend(4, 10,legend = c("exact","heuristic"), col = c('blue', 'red'), lty=c(1,1))
# uniform average min comparison
dev.new()
plot(x, uniform_frame$exact.values, type = "o", lwd = 2, col = "blue", main = "Average min value comparison (uniform)",
xlab = "Number of elements", ylab = "average min", ylim = c(0, uniform_max_of_min))
lines(x, uniform_frame$heuristic.values, type = "o", lwd = 3, col = 'red')
legend(4, 8,legend = c("exact","heuristic"), col = c('blue', 'red'), lty=c(1,1))
# geometric execution comparison
dev.new()
plot(x, geometric_frame$exact.time, type = "o", lwd = 2, col = "blue",main = "Computation time comparison (geometric)",
xlab = "Number of elements", ylab = "computation time(ms)")
lines(x, geometric_frame$heuristic.time, type = "o", lwd = 2, col = 'red')
legend(4, 10,legend = c("exact","heuristic"), col = c('blue', 'red'), lty=c(1,1))
# geometric average min comparison
dev.new()
plot(x, geometric_frame$exact.values, type = "o", lwd = 2, col = "blue", main = "Average min value comparison (geometric)",
xlab = "Number of elements", ylab = "average min", ylim = c(0, geometric_max_of_min))
lines(x, geometric_frame$heuristic.values, type = "o", lwd = 3, col = 'red')
legend(4,8,legend = c("exact","heuristic"), col = c('blue', 'red'), lty=c(1,1))
# poisson execution comparison
dev.new()
plot(x, geometric_frame$exact.time, type = "o", lwd = 2, col = "blue",main = "Computation time comparison (poisson)",
xlab = "Number of elements", ylab = "computation time(ms)")
lines(x, geometric_frame$heuristic.time, type = "o", lwd = 2, col = 'red')
legend(4, 10,legend = c("exact","heuristic"), col = c('blue', 'red'), lty=c(1,1))
# poisson average min comparison
dev.new()
plot(x, poisson_frame$exact.values, type = "o", lwd = 2, col = "blue", main = "Average min value comparison (poisson)",
xlab = "Number of elements", ylab = "average min", ylim = c(0, poisson_max_of_min))
lines(x, poisson_frame$heuristic.values, type = "o", lwd = 3, col = 'red')
legend(4, 8,legend = c("exact","heuristic"), col = c('blue', 'red'), lty=c(1,1))
# heuristic execution time test
dev.new()
plot(xh, hueristic_time, type = "p", lwd = 1, col = "red", main = "Heuristic execution time",
xlab = "Number of elements", ylab = "computation time(s)")
heuristic_upper <- 2000
for (i in 4:heuristic_upper){
h <- sample(1:i, i, replace = TRUE) # random uniform
write(h, file = test_heuristic_time, sep = ",", ncolumns = heuristic_upper, append = TRUE)
}
if (file.exists(test_heuristic_time)){
# Delete if exists
file.remove(test_heuristic_time)
}
test_heuristic_time <- paste(dir, "test_samples/test-heuristic-time.txt", sep = "/")
if (file.exists(test_heuristic_time)){
# Delete if exists
file.remove(test_heuristic_time)
}
heuristic_upper <- 2000
for (i in 4:heuristic_upper){
h <- sample(1:i, i, replace = TRUE) # random uniform
write(h, file = test_heuristic_time, sep = ",", ncolumns = heuristic_upper, append = TRUE)
}
library("rjson")
dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
# get values form json files
uniform_name <- paste(dir,"/test_outputs/uniform.json", sep = "")
geometric_name <- paste(dir,"/test_outputs/geometric.json", sep = "")
poisson_name <- paste(dir,"/test_outputs/poisson.json", sep = "")
hueristic_time_name <- paste(dir,"/test_outputs/heuristic-time.json", sep = "")
uniform <- fromJSON(file = uniform_name)
geometric <- fromJSON(file = geometric_name)
poisson <- fromJSON(file = poisson_name)
hueristic_time <- fromJSON(file = hueristic_time_name)
# form data frames
uniform_frame <- as.data.frame(uniform)
geometric_frame <- as.data.frame(geometric)
poisson_frame <- as.data.frame(poisson)
size <- length(uniform_frame$exact.time)
heuristic_size <- length(hueristic_time)
# take max of min, needed for nicer looking plots,
# heuristic solution will always produce values more or equal to exact values
uniform_max_of_min = max(uniform_frame$heuristic.values)
geometric_max_of_min = max(geometric_frame$heuristic.values)
poisson_max_of_min = max(geometric_frame$heuristic.values)
# x vector is started from 4 as it is minimum possible set size
x <- 4:(size + 3)
xh <- 4:(heuristic_size + 3)
# uniform execution comparison
dev.new()
plot(x, uniform_frame$exact.time, type = "o", lwd = 2, col = "blue",main = "Computation time comparison (uniform)",
xlab = "Number of elements", ylab = "computation time(ms)")
lines(x, uniform_frame$heuristic.time, type = "o", lwd = 2, col = 'red')
legend(4, 10,legend = c("exact","heuristic"), col = c('blue', 'red'), lty=c(1,1))
# uniform average min comparison
dev.new()
plot(x, uniform_frame$exact.values, type = "o", lwd = 2, col = "blue", main = "Average min value comparison (uniform)",
xlab = "Number of elements", ylab = "average min", ylim = c(0, uniform_max_of_min))
lines(x, uniform_frame$heuristic.values, type = "o", lwd = 3, col = 'red')
legend(4, 8,legend = c("exact","heuristic"), col = c('blue', 'red'), lty=c(1,1))
# geometric execution comparison
dev.new()
plot(x, geometric_frame$exact.time, type = "o", lwd = 2, col = "blue",main = "Computation time comparison (geometric)",
xlab = "Number of elements", ylab = "computation time(ms)")
lines(x, geometric_frame$heuristic.time, type = "o", lwd = 2, col = 'red')
legend(4, 10,legend = c("exact","heuristic"), col = c('blue', 'red'), lty=c(1,1))
# geometric average min comparison
dev.new()
plot(x, geometric_frame$exact.values, type = "o", lwd = 2, col = "blue", main = "Average min value comparison (geometric)",
xlab = "Number of elements", ylab = "average min", ylim = c(0, geometric_max_of_min))
lines(x, geometric_frame$heuristic.values, type = "o", lwd = 3, col = 'red')
legend(4,8,legend = c("exact","heuristic"), col = c('blue', 'red'), lty=c(1,1))
# poisson execution comparison
dev.new()
plot(x, geometric_frame$exact.time, type = "o", lwd = 2, col = "blue",main = "Computation time comparison (poisson)",
xlab = "Number of elements", ylab = "computation time(ms)")
lines(x, geometric_frame$heuristic.time, type = "o", lwd = 2, col = 'red')
legend(4, 10,legend = c("exact","heuristic"), col = c('blue', 'red'), lty=c(1,1))
# poisson average min comparison
dev.new()
plot(x, poisson_frame$exact.values, type = "o", lwd = 2, col = "blue", main = "Average min value comparison (poisson)",
xlab = "Number of elements", ylab = "average min", ylim = c(0, poisson_max_of_min))
lines(x, poisson_frame$heuristic.values, type = "o", lwd = 3, col = 'red')
legend(4, 8,legend = c("exact","heuristic"), col = c('blue', 'red'), lty=c(1,1))
# heuristic execution time test
dev.new()
plot(xh, hueristic_time, type = "p", lwd = 1, col = "red", main = "Heuristic execution time",
xlab = "Number of elements", ylab = "computation time(s)")
shiny::runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp()
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp()
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
View(append_timeseries)
View(append_timeseries)
View(append_timeseries)
View(append_timeseries)
View(choose_predefined_test)
View(choose_predefined_test)
View(divide_data)
View(divide_data)
View(choose_predefined_test)
View(choose_predefined_test)
View(choose_predefined_test)
View(choose_predefined_test)
View(form_timeseriese)
View(form_timeseriese)
View(append_timeseries)
View(append_timeseries)
View(get_data_names)
View(get_data_names)
View(get_bounds)
View(get_bounds)
View(get_models_names)
View(get_models_names)
View(model_load)
View(model_load)
View(model_prediction)
View(model_prediction)
View(model_training)
View(model_training)
View(form_timeseriese)
View(form_timeseriese)
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp()
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
shiny::runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
install.packages("styler")
styler:::style_active_file()
shiny::runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
library("shiny")
library("shinyjs")
library("shinydashboard")
library("tensorflow")
library("keras")
library("ggplot2")
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
dd <- data.frame(1:size, data_frame$Open, data_frame$Close)
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
styler:::style_active_file()
runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
shiny::runApp('D:/studing_in_WUT/DIPLOMA/implementation/cnn-app')
library("shiny")
library("shinyjs")
library("shinydashboard")
library("tensorflow")
library("keras")
library("ggplot2")
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library("shiny")
library("shinyjs")
library("shinydashboard")
library("tensorflow")
library("keras")
library("ggplot2")
library("stringr")
# Set current working dir
dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dir)
runApp("cnn-app", launch.browser = TRUE)
